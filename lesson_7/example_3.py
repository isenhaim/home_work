# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).


class Cell:

    def __init__(self, cell):
        self.cell = cell

# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (_add_())

    # Сложение. Объединение двух клеток.
    # При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
    def __add__(self, other):
        # Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
        # обычное (не целочисленное) деление клеток, соответственно.
        # Сделал через try-except.
        try:
            return Cell(self.cell + other.cell)
        except AttributeError:
            return 'Складывать с клетками можно только клетки'

# вычитание(_sub_())

    # Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
    # двух клеток больше нуля, иначе выводить соответствующее сообщение.
    def __sub__(self, other):
        try:
            if self.cell - other.cell > 0:
                return Cell(self.cell - other.cell)
            else:
                return 'Эти клетки нельзя вычитать'
        except AttributeError:
            return 'Вычитание клеток возможно только между клетками'

# умножение(_mul_())

    # Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
    # ячеек этих двух клеток.
    def __mul__(self, other):
        try:
            return Cell(self.cell * other.cell)
        except AttributeError:
            return 'Умножение клеток возможно только между клетками'

# деление(_truediv_()).

    # Деление. Создается общая клетка из двух.
    # Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
    def __truediv__(self, other):
        try:
            # В методе деления должно осуществляться округление значения до целого числа.
            return Cell(int(self.cell / other.cell))
        except AttributeError:
            return 'Деление клеток возможно только между клетками'

    # В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
    # Данный метод позволяет организовать ячейки по рядам.
    # Метод должен возвращать строку вида ****\n*****\n****..., где количество ячеек между \n равно
    # переданному аргументу.
    # Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
    # Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
    # Тогда метод make_order() вернет строку: ****\n*****\n*.
    # Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
    # Тогда метод make_order() вернет строку: ****\n*****\n****.

    def make_order(self, cell_row):
        return ('*' * cell_row + '\n') * (self.cell // cell_row) + ('*' * (self.cell % cell_row))


if __name__ == '__main__':

    cell_1 = Cell(8)
    cell_2 = Cell(4)

    print(cell_1.make_order(4))

    cell_3 = cell_1 / cell_2
    print(cell_3.cell)

    cell_4 = cell_1 - cell_2

    print(cell_4.cell)