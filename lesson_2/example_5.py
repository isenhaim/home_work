# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

# В целом решение как по мне излишне усложнено, но работает
# из-за нехватки времени оставляю так (Сейчас лучше, чем никогда.)
# Что касается метода списка sort принципиально делал не используя его, т.к
# пункт задачи "то новый элемент с тем же значением должен разместиться после них."
# становится бессмысленным.

my_list = [7, 5, 3, 3, 2]

while True:
    elements = input('Введи элемент рейтинга для завершения введите N: ')
    if elements == 'N':
        break
    elements = int(elements)

    # Захотелось использовать исключение
    try:
        my_list.index(elements)
        my_list.insert((my_list.index(elements) + 1), elements)
    except ValueError:
        # print('Такого числа нет в списке')
        # В этом месте начинается поиск места для нового элемента в списке
        if elements > my_list[0]:
            my_list.insert(0, elements)

        elif elements > my_list[len(my_list) - 1]:
            for i in my_list[1:len(my_list) - 1]:
                if elements > i:
                    my_list.insert(my_list.index(i), elements)
                    break
                else:
                    continue
        else:
            my_list.insert(len(my_list), elements)

    print(my_list)
